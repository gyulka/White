Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport math\r\nfrom Pole import Board\r\n\r\nSIZE = (1280, 720)\r\nSIZE_PERS = [55, 80]\r\nSIZE_CELL = 40\r\n\r\n\r\nclass Bullet(pygame.sprite.Sprite):\r\n    def __init__(self, group, otkuda, kuda, sc, event, otraj=3):\r\n        super().__init__(group)\r\n        self.otkuda = otkuda\r\n        self.kuda = kuda\r\n        self.velocity = 15\r\n        self.screen = sc\r\n        self.fps = 60\r\n        self.height, self.width = SIZE\r\n        self.otraj = otraj\r\n        self.kolvo_otraj = -1\r\n        self.size_bullet = 40\r\n        #  возможно будет двигатся лишь на положительную сторону\r\n        #  по оси у(тогда надо попробовать или иф или арксинус и теорему пифагора\r\n        #  куда(?) нужно менять координату для каждого кадра\r\n        self.alfa = math.atan(\r\n            (self.kuda[0] - self.otkuda[0]) / (self.kuda[1] - self.otkuda[1]))  # нашли направление вектора(градус)\r\n        self.moving = [\r\n            -self.velocity * math.sin(self.alfa) * (self.otkuda[1] - self.kuda[1]) // abs(self.otkuda[1] - self.kuda[1]),\r\n            -self.velocity * math.cos(self.alfa) * (self.otkuda[1] - self.kuda[1]) // abs(self.otkuda[1] - self.kuda[1])]\r\n        self.image = mandalorian1\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = otkuda[0]\r\n        self.rect.y = otkuda[1]\r\n        # print(self.moving, (self.otkuda[0] - self.kuda[0]), abs(self.otkuda[0] - self.kuda[0]), (self.otkuda[1] - self.kuda[1]), abs(self.otkuda[1] - self.kuda[1]))\r\n        # print(otkuda, kuda, SIZE, self.alfa, (self.kuda[0] - self.otkuda[0]), (self.kuda[1] - self.otkuda[1]), self.moving)\r\n        self.update(event)\r\n\r\n    def update(self, *args):\r\n        if self.rect.x >= self.height - self.size_bullet or self.rect.x <= 0:\r\n            self.kolvo_otraj += 1\r\n            self.moving[0] = - self.moving[0]\r\n        if self.rect.y >= self.width - self.size_bullet or self.rect.y <= 0:\r\n            self.kolvo_otraj += 1\r\n            self.moving[1] = - self.moving[1]\r\n        if self.kolvo_otraj == self.otraj or self.isshootedByPlayer():\r\n            self.kill()\r\n        self.rect = self.rect.move(*self.moving)\r\n\r\n    def isshootedByPlayer(self):\r\n        return False\r\n\r\n\r\ndef move():\r\n    global wait, pos, stap\r\n    for i in flags:\r\n        wait += 1\r\n        if flags[i]:\r\n            wait = 0\r\n            image1 = mandalorian1_move1\r\n            image2 = mandalorian1_move2\r\n            check_and_break = False\r\n            if i == pygame.K_w and board.check_in_stop((pos[0], pos[1] - sp)):\r\n                if pos[1] - sp >= 1:\r\n                    screen.fill((0, 0, 0))\r\n                    board.render_level()\r\n                    pos = (pos[0], pos[1] - sp)\r\n                    image1 = mandalorian4_move1\r\n                    image2 = mandalorian4_move2\r\n                    check_and_break = True\r\n            if i == pygame.K_a and board.check_in_stop((pos[0] - sp, pos[1])):\r\n                if pos[0] - sp >= 1:\r\n                    screen.fill((0, 0, 0))\r\n                    board.render_level()\r\n                    pos = (pos[0] - sp, pos[1])\r\n                    image1 = mandalorian3_move1\r\n                    image2 = mandalorian3_move2\r\n                    check_and_break = True\r\n            if i == pygame.K_s and board.check_in_stop((pos[0], pos[1] + sp)):\r\n                if pos[1] < size[1] - size_character[1]:\r\n                    screen.fill((0, 0, 0))\r\n                    board.render_level()\r\n                    pos = (pos[0], pos[1] + sp)\r\n                    image1 = mandalorian1_move1\r\n                    image2 = mandalorian1_move2\r\n                    check_and_break = True\r\n            if i == pygame.K_d and board.check_in_stop((pos[0] + sp, pos[1])):\r\n                if pos[0] <= size[0] - size_character[0]:\r\n                    screen.fill((0, 0, 0))\r\n                    board.render_level()\r\n                    pos = (pos[0] + sp, pos[1])\r\n                    image1 = mandalorian2_move1\r\n                    image2 = mandalorian2_move2\r\n                    check_and_break = True\r\n            if i and check_and_break:\r\n                stap += 1\r\n                if stap <= 20:\r\n                    screen.blit(image1, pos)\r\n                elif stap <= 40:\r\n                    screen.blit(image2, pos)\r\n                else:\r\n                    screen.blit(image2, pos)\r\n                    stap = 0\r\n        if wait >= 50:\r\n            screen.fill((0, 0, 0))\r\n            board.render_level()\r\n            screen.blit(mandalorian1, pos)\r\n        board.on_line(pos)\r\n\r\n\r\ndef shoot(pos1, pos2):\r\n    if pos1 != pos2:\r\n        mimimum = min(pos1[0], pos2[0])\r\n        coor1 = (pos1[0] - pos2[0]) / mimimum\r\n        coor2 = (pos1[1] - pos2[1]) / mimimum\r\n        sped = [coor1, coor2]\r\n        shoot_coord.append([[pos1[0], pos1[1]], [pos2[0], pos2[1]], sped])\r\n\r\n\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    all_sprites = pygame.sprite.Group()\r\n    shoot_coord = list()\r\n    size = (1280, 720)\r\n    screen = pygame.display.set_mode(size)\r\n    screen.fill((0, 0, 0))\r\n    size_character = (40, 80)\r\n    pos = (size[0] // 2 - size_character[0] // 2, size[1] // 2 - size_character[1] // 2)\r\n    running = True\r\n    flags = {}\r\n    stap = 0\r\n    s = ''\r\n    wait = 0\r\n    sp = 2\r\n    smome = False\r\n    logo = pygame.image.load('files/textures/Logo/logo.png')\r\n    mandalorian1 = pygame.image.load('files/textures/main_charachter_1/mandalorian.png')\r\n    mandalorian1_move1 = pygame.image.load('files/textures/main_charachter_1/mandalorian_move1.png')\r\n    mandalorian1_move2 = pygame.image.load('files/textures/main_charachter_1/mandalorian_move2.png')\r\n    mandalorian1_shot = pygame.image.load('files/textures/main_charachter_1/mandalorian_shot.png')\r\n\r\n    mandalorian2_move1 = pygame.image.load('files/textures/main_charachter_1/mandalorian_right_move1.png')\r\n    mandalorian2_move2 = pygame.image.load('files/textures/main_charachter_1/mandalorian_right_move2.png')\r\n    mandalorian2_shot = pygame.image.load('files/textures/main_charachter_1/mandalorian_right_shot.png')\r\n\r\n    mandalorian3_move1 = pygame.image.load('files/textures/main_charachter_1/mandalorian_left_move1.png')\r\n    mandalorian3_move2 = pygame.image.load('files/textures/main_charachter_1/mandalorian_left_move2.png')\r\n    mandalorian3_shot = pygame.image.load('files/textures/main_charachter_1/mandalorian_left_shot.png')\r\n\r\n    mandalorian4_move1 = pygame.image.load('files/textures/main_charachter_1/mandalorian_back_move1.png')\r\n    mandalorian4_move2 = pygame.image.load('files/textures/main_charachter_1/mandalorian_back_move2.png')\r\n    board = Board(screen, 1280, 720)\r\n    board.render_pole()\r\n    board.lvl('test_level.txt')\r\n    screen.blit(logo, (0, 0))\r\n    print(board.all_coord())\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                bullet = Bullet(all_sprites, pos, event.pos, screen, event)\r\n            if event.type == pygame.KEYDOWN:\r\n                flags[event.key] = True\r\n                smome = True\r\n            if event.type == pygame.KEYUP:\r\n                flags[event.key] = False\r\n        move()\r\n        all_sprites.draw(screen)\r\n        all_sprites.update()\r\n        pygame.display.flip()\r\n    pygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	
+++ b/test.py	
@@ -8,17 +8,18 @@
 
 
 class Bullet(pygame.sprite.Sprite):
-    def __init__(self, group, otkuda, kuda, sc, event, otraj=3):
+    def __init__(self, group, otkuda, kuda, sc, event, coord, otraj=3):
         super().__init__(group)
         self.otkuda = otkuda
         self.kuda = kuda
-        self.velocity = 15
+        self.velocity = 10
         self.screen = sc
         self.fps = 60
         self.height, self.width = SIZE
         self.otraj = otraj
         self.kolvo_otraj = -1
         self.size_bullet = 40
+        self.coord = coord
         #  возможно будет двигатся лишь на положительную сторону
         #  по оси у(тогда надо попробовать или иф или арксинус и теорему пифагора
         #  куда(?) нужно менять координату для каждого кадра
@@ -152,13 +153,12 @@
     board.render_pole()
     board.lvl('test_level.txt')
     screen.blit(logo, (0, 0))
-    print(board.all_coord())
     while running:
         for event in pygame.event.get():
             if event.type == pygame.QUIT:
                 running = False
             if event.type == pygame.MOUSEBUTTONDOWN:
-                bullet = Bullet(all_sprites, pos, event.pos, screen, event)
+                bullet = Bullet(all_sprites, pos, event.pos, screen, event, board.all_coord())
             if event.type == pygame.KEYDOWN:
                 flags[event.key] = True
                 smome = True
